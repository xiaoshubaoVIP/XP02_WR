/****************************************************************************/
/*	File   :             Key.c               */
/*	Author :                       songjiang                                */
/*	Version:                          V1.0                                  */
/*	Date   :                    2019/7/25,16:30:48                         */
/********************************Modify History******************************/
/*   yy/mm/dd     F. Lastname    Description of Modification                */
/****************************************************************************/
/*	Attention:                                                              */
/*	CopyRight:                CopyRight 2017--2025                          */
/*           Shenzhen Xiaojun Technology Co., Ltd.  Allright Reserved        */
/*	Project :                      SC01                           */
/****************************************************************************/
#include "Key.h"
#include "main.h"
#include "Module.h"

#define KEYCOUNTERNUMLONG 				    (300)		    //3000MS
#define KEYCOUNTERNUMCONTINUOUS_LIMIT 	    (100)			//300MS
#define KEYCOUNTERNUMINTERVAL_LIMIT 		(80)		    //200MS
#define KEYCOUNTERNUMSHORT_LIMIT 		    (70)			//400MS
#define KEYCOUNTERNUMSHORT 				    (2)			    //20MS
#define KEYCOUNTERREPEAT 					(20)		    //20MS

#define KEY_CLICK_1_TIMES					(1)
#define KEY_CLICK_2_TIMES					(2)
#define KEY_CLICK_3_TIMES					(3)
#define KEY_CLICK_4_TIMES					(4)

typedef enum{
	KEY1_PRESS = 0x01,
	KEY2_PRESS = 0x02,
	KEY3_PRESS = 0x04,
    KEY4_PRESS = 0x08,
    KEY5_PRESS = 0x10,
    
	KEY_DEFAULT = 0x80,
}KEYValue;


typedef enum{
	TYPE_NONE = 0x00,
	TYPE_LONG_CLICK,
	TYPE_WAIT,
	TYPE_SHORT_CLICK,
	TYPE_DOUBLE_CLICK,
	TYPE_THREE_CLICK,
	TYPE_FOUR_CLICK,
}KEYType;

typedef struct _KeyApi{
	uint16_t keyCounter;
	uint8_t keyClickFlag;
	KEYType keyType;	
	KEYValue keyCurrent;
	KEYValue keyValue;
	KEYValue keyValueLast;
	uint8_t  keyClickCnt;
}KeyApi;

static KeyApi KeyApiTag;
static KeyApi* pKeyApiTag = &KeyApiTag;

	
/**********************************************************************/
//Description:		KeyInit														  
//Parameters:                        												  
//Return:   											
//Date:  
//author:		    song
/**********************************************************************/
void KeyInit(void)
{
	pKeyApiTag->keyCounter  = 0;	
	pKeyApiTag->keyClickFlag = 0;
	pKeyApiTag->keyValue = KEY_DEFAULT;
	pKeyApiTag->keyCurrent =  KEY_DEFAULT;	
	pKeyApiTag->keyValueLast = KEY_DEFAULT;
	pKeyApiTag->keyType = TYPE_NONE;
	pKeyApiTag->keyClickCnt = 0;

	TmrInsertTimer(eTmrHdlKeyScan, TMR_PERIOD(10), NULL);
	ClearHaltFlag(eHaltFlagKey);
}

/**********************************************************************/
//Description:	GetKeyApiTag()															  
//Parameters:                        												  
//Return:   																  
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
KeyApi* GetKeyApiTag(void)
{
	return pKeyApiTag;
}

/**********************************************************************/
//Description:	Key_Init()															  
//Parameters:                        												  
//Return:   																  
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
uint8_t GetKeyClickFlag(void)
{
	return pKeyApiTag->keyClickFlag;
}

/**********************************************************************/
//Description:	Key_Init()															  
//Parameters:                        												  
//Return:   																  
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
void SetKeyClickFlag(uint8_t Flag)
{
	pKeyApiTag->keyClickFlag = Flag;
}


/**********************************************************************/
//Description:	Key_Init()															  
//Parameters:                        												  
//Return:   																  
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
static uint8_t KeyGpioValue()
{
	uint8_t ret = KEY_DEFAULT;	 
	if(TEST_KEY_is_L())
	{
		ret |= KEY1_PRESS;
	}
	return ret;
}


/**********************************************************************/
//Description:	Key_Init()												
//Parameters:                        									
//Return:   															
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
void KeyCheck(void)
{
	static uint8_t flag = 0 ;
	KeyApi* pKeyApi = GetKeyApiTag();
	if (GetKeyClickFlag())
	{
		flag = 0;
	}
	else
	{
		if (KeyGpioValue() == KEY_DEFAULT)			//  high
		{ 
			ClearHaltFlag(eHaltFlagKey);
			flag = 1;
			SetKeyClickFlag(0);
			pKeyApi->keyCounter = 0;	
			pKeyApi->keyCurrent = KEY_DEFAULT;
#ifdef SUPPORT_RF_NET_FUNCTION
			if(SysAO.eMode == RadioIntranetMasterTestMode)
			{
				SysteSetSig(eEventSigRadioIntranetTestKeyStop);
			}
#endif
		}
		else
		{
			SetHaltFlag(eHaltFlagKey);
			if(flag == 1)
			{
				SetKeyClickFlag(1);
			}
		}
	}
}


/**********************************************************************/
//Description:	isNewKeyMsg()											
//Parameters:                        									
//Return:   															
//Date:           
//Authot:  	quanwu.xu  
/**********************************************************************/
bool isNewKeyMsg(void)
{
	bool ret = FALSE;
	KeyApi* pKeyApi = GetKeyApiTag();
	if ((pKeyApi->keyValue != KEY_DEFAULT) && (pKeyApi->keyType != TYPE_WAIT))
	{
		pKeyApi->keyValueLast = pKeyApi->keyValue;
		pKeyApi->keyValue = KEY_DEFAULT;
		ret = TRUE;
	}
	return ret; 
}


/**********************************************************************/
//Description:	Key_Init()															  
//Parameters:                        												  
//Return:   																  
//Date:           quanwu.xu  
/**********************************************************************/
void KeyGpioScan(void)
{
	KeyApi* pKeyApi = GetKeyApiTag();
	uint8_t KeyTemp = KeyGpioValue();

	if(GetKeyClickFlag())
	{
		if (pKeyApi->keyCurrent == KeyTemp)						//按下按键												
		{
			pKeyApi->keyCounter++;
			if(pKeyApi->keyCounter >= KEYCOUNTERNUMLONG)		//10 ms * 300 = 3000ms
			{	
				pKeyApi->keyType = TYPE_LONG_CLICK;
				pKeyApi->keyValue = ( KEYValue)(pKeyApi->keyCurrent & 0x7F);
				SetKeyClickFlag(0);
			}
		}
		else
		{
			if(KeyTemp == KEY_DEFAULT)
			{
				if((pKeyApi->keyCounter >= KEYCOUNTERNUMSHORT)	&& (pKeyApi->keyCounter 
												< KEYCOUNTERNUMSHORT_LIMIT))//短按按键
				{
					pKeyApi->keyType = TYPE_WAIT;
					pKeyApi->keyValue = (KEYValue)(pKeyApi->keyCurrent & 0x7F);
					SetKeyClickFlag(0);

					pKeyApi->keyClickCnt++;
					TmrInsertTimer(eTmrHdlKeyDouble, TMR_PERIOD(1000), NULL);
				}
				else
				{
					pKeyApi->keyCounter = 0;
					pKeyApi->keyValue = KEY_DEFAULT;
					pKeyApi->keyCurrent = KEY_DEFAULT;
					SetKeyClickFlag(0);
				}		
			}
			else
			{
				pKeyApi->keyCounter  = 0;
				pKeyApi->keyValue = KEY_DEFAULT; 
				pKeyApi->keyCurrent = KEY_DEFAULT;
			}
		}
		pKeyApi->keyCurrent =  (KEYValue)KeyTemp;
	}	
}


/**********************************************************************/
//Description:	PollingDoubleClickScan()															  
//Parameters:                        												  
//Return:   																  
//Date:         quanwu.xu  
/**********************************************************************/
void PollingDoubleClickScan(void)
{
	KeyApi* pKeyApi = GetKeyApiTag();
	pKeyApi->keyType = (KEYType)(pKeyApi->keyClickCnt + 2);
}


/**********************************************************************/
//Description:	PollingKeyScan()															  
//Parameters:                        												  
//Return:   																  
//Date:           quanwu.xu  
/**********************************************************************/
void PollingKeyScan(void)
{
	if(GetKeyClickFlag())
	{
		KeyGpioScan();
	}
}

/**********************************************************************/
//Description:	Key1Handle()															  
//Parameters:                        												  
//Return:   																  
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
void Key1Handle(KEYType KeyType)
{
	switch(KeyType)
	{
		case TYPE_SHORT_CLICK:
			SysteSetSig(eEventSigKey1Clik);
			break; 

		case TYPE_DOUBLE_CLICK:
			SysteSetSig(eEventSigDoubleClik);
			break;

		case TYPE_THREE_CLICK:
			SysteSetSig(eEventSigThreeClik);
			break;

		case TYPE_FOUR_CLICK:
			SysteSetSig(eEventSigFourTimesClik);
			break;

		case TYPE_LONG_CLICK:
			SysteSetSig(eEventSigLongClik);
			break;

		default:
			break;
	}
}



/**********************************************************************/
//Description:	Key2Handle()															  
//Parameters:                        												  
//Return:   																  
//Date:           
//Author:	quanwu.xu  
/**********************************************************************/
void Key2Handle(KEYType KeyType)
{
	switch(KeyType)
	{
		case TYPE_SHORT_CLICK:
			break;

		case TYPE_DOUBLE_CLICK:
			break;

		case TYPE_THREE_CLICK:
			break;

		case TYPE_FOUR_CLICK:
			break;

		case TYPE_LONG_CLICK:
			break;

		default:
			break;
	}
}

/**********************************************************************/
//Description:	Key_Handle()															  
//Parameters:                        												  
//Return:   																  
//Date:         quanwu.xu  
/**********************************************************************/
void KeyHandleMsg(void)
{
	KeyApi *pKeyApi = GetKeyApiTag();
	
	KeyCheck();
	if(isNewKeyMsg() == TRUE)
	{
		switch (pKeyApi->keyValueLast)
		{
			case KEY1_PRESS:
			{ 
				printf("key 1, %d\n", pKeyApi->keyType);
				Key1Handle(pKeyApi->keyType);
			}
			break;

			case KEY2_PRESS:
			{ 
				printf("key 2, %d\n", pKeyApi->keyType);
				Key2Handle(pKeyApi->keyType);
			}
			break;

			default:
				break;
		}

		pKeyApi->keyClickCnt = 0;
		pKeyApi->keyType = TYPE_NONE;
		pKeyApi->keyValueLast = KEY_DEFAULT;
		TmrDeleteTimer(eTmrHdlKeyDouble);
	}
}

