#include "main.h"
#include "Module.h"
#include "Polling.h"

CoObjectTag COAO; 

#define CAIL_CO_WAIT_TIME	(120)
#define SAMPLE_CO_TIME_CNT	(16)

const uint16_t co_temp_slope_rate[91]={
	655,664,674,684,694,704,714,723,733,742,                // -20 - -11
	752,761,771,780,789,799,808,817,826,835,                // -10 - -1
	844,                                                  	// 0
	852,861,870,878,887,895,903,911,919,927,                // 1 - 10
	935,943,950,958,965,972,980,987,994,1000,               // 11 - 20
	1007,1013,1020,1026,1032,1038,1044,1050,1055,1060,      // 21 - 30
	1066,1071,1076,1080,1085,1089,1094,1098,1101,1105,      // 31 - 40
	1109,1112,1115,1118,1121,1124,1126,1128,1130,1132,      // 41 - 50
	1134,1135,1136,1137,1138,1139,1139,1139,1139,1139,      // 51 - 60
	1139,1139,1139,1139,1139,1139,1139,1139,1139,1139       // 61 - 70
};

//co temp compensation coefficents
#define     CO_TN_20   5000 
#define     CO_TN_19   5000 
#define     CO_TN_18   5000 
#define     CO_TN_17   5000 
#define     CO_TN_16   5000 
#if defined SUPPORT_UL2034_UL217
#define     CO_TN_15   5000 
#define     CO_TN_14   5000 
#define     CO_TN_13   5000 
#define     CO_TN_12   5000 
#define     CO_TN_11   5000

#define     CO_TN_10   5000
#define     CO_TN_9    5000 
#define     CO_TN_8    5000 
#define     CO_TN_7    5000 
#define     CO_TN_6    5000 
#elif defined SUPPORT_EN50291_EN14604
#define     CO_TN_15   1000 
#define     CO_TN_14   1000 
#define     CO_TN_13   1000 
#define     CO_TN_12   1000 
#define     CO_TN_11   1000

#define     CO_TN_10   1000
#define     CO_TN_9    1000 
#define     CO_TN_8    1000 
#define     CO_TN_7    1000 
#define     CO_TN_6    1000 
#endif 
#define     CO_TN_5    1000  
#define     CO_TN_4    1000
#define     CO_TN_3    1000  
#define     CO_TN_2    1000  
#define     CO_TN_1    1000

#define     CO_TP_0    1000 

#define     CO_TP_1    1000  
#define     CO_TP_2    1000  
#define     CO_TP_3    1000     
#define     CO_TP_4    1000  
#define     CO_TP_5    1000 
#define     CO_TP_6    1000 
#define     CO_TP_7    1000 
#define     CO_TP_8    1000 
#define     CO_TP_9    1000 
#define     CO_TP_10   1000 

#define     CO_TP_11   1000 
#define     CO_TP_12   1000 
#define     CO_TP_13   1000 
#define     CO_TP_14   1000 
#define     CO_TP_15   1000 
#define     CO_TP_16   1000 
#define     CO_TP_17   1000 
#define     CO_TP_18   1000 
#define     CO_TP_19   1000 
#define     CO_TP_20   1000 

#define     CO_TP_21   1000 
#define     CO_TP_22   1000 
#define     CO_TP_23   1000 
#define     CO_TP_24   1000 
#define     CO_TP_25   1000 
#define     CO_TP_26   1000
#define     CO_TP_27   1000 
#define     CO_TP_28   1000
#define     CO_TP_29   1000 
#define     CO_TP_30   1000 

#define     CO_TP_31   1000 
#define     CO_TP_32   1000 
#define     CO_TP_33   1000 
#define     CO_TP_34   1000 
#define     CO_TP_35   1000 
#define     CO_TP_36   1000 
#define     CO_TP_37   1000 
#define     CO_TP_38   1000 
#define     CO_TP_39   1000 
#define     CO_TP_40   1000 

#define     CO_TP_41   1000 
#define     CO_TP_42   1000 
#define     CO_TP_43   1000
#define     CO_TP_44   1000 
#define     CO_TP_45   1000 
#define     CO_TP_46   1000 
#define     CO_TP_47   1000
#define     CO_TP_48   1000
#define     CO_TP_49   1000 
#define     CO_TP_50   1000 

#define     CO_TP_51   1000 
#define     CO_TP_52   1000 
#define     CO_TP_53   1000 
#define     CO_TP_54   1000
#if defined SUPPORT_UL2034_UL217
#define     CO_TP_55   5000 
#define     CO_TP_56   5000
#define     CO_TP_57   5000 
#define     CO_TP_58   5000
#define     CO_TP_59   5000 
#define     CO_TP_60   5000
#elif defined SUPPORT_EN50291_EN14604
#define     CO_TP_55   1000 
#define     CO_TP_56   1000
#define     CO_TP_57   1000 
#define     CO_TP_58   1000
#define     CO_TP_59   1000 
#define     CO_TP_60   1000
#endif

#define     CO_TP_61   5000 
#define     CO_TP_62   5000
#define     CO_TP_63   5000 
#define     CO_TP_64   5000 
#define     CO_TP_65   5000
#define     CO_TP_66   5000 
#define     CO_TP_67   5000 
#define     CO_TP_68   5000
#define     CO_TP_69   5000 
#define     CO_TP_70   5000


const uint16_t co_temp_offset_rate[91]={
CO_TN_20,CO_TN_19,CO_TN_18,CO_TN_17,CO_TN_16, 
CO_TN_15,CO_TN_14,CO_TN_13,CO_TN_12,CO_TN_11,
CO_TN_10,CO_TN_9, CO_TN_8, CO_TN_7, CO_TN_6, 
CO_TN_5, CO_TN_4, CO_TN_3, CO_TN_2, CO_TN_1, 
CO_TP_0, 
CO_TP_1, CO_TP_2, CO_TP_3, CO_TP_4, CO_TP_5, 
CO_TP_6, CO_TP_7, CO_TP_8, CO_TP_9, CO_TP_10,
CO_TP_11,CO_TP_12,CO_TP_13,CO_TP_14,CO_TP_15,
CO_TP_16,CO_TP_17,CO_TP_18,CO_TP_19,CO_TP_20, 
CO_TP_21,CO_TP_22,CO_TP_23,CO_TP_24,CO_TP_25,
CO_TP_26,CO_TP_27,CO_TP_28,CO_TP_29,CO_TP_30,
CO_TP_31,CO_TP_32,CO_TP_33,CO_TP_34,CO_TP_35,
CO_TP_36,CO_TP_37,CO_TP_38,CO_TP_39,CO_TP_40,
CO_TP_41,CO_TP_42,CO_TP_43,CO_TP_44,CO_TP_45,
CO_TP_45,CO_TP_47,CO_TP_48,CO_TP_49,CO_TP_50,
CO_TP_51,CO_TP_52,CO_TP_53,CO_TP_54,CO_TP_55,
CO_TP_56,CO_TP_57,CO_TP_58,CO_TP_59,CO_TP_60,
CO_TP_61,CO_TP_62,CO_TP_63,CO_TP_64,CO_TP_65,
CO_TP_66,CO_TP_67,CO_TP_68,CO_TP_69,CO_TP_70 
};

typedef enum _eCoTimeOut
{
	eCoCail = 0,
	eCoAlarm,
	eCoAlarmInterVal,
	eCoErr,
	eCoNetAlarmTimeout,
}eCoTimeOut;


void InitCO_Data(void)
{
	COAO.TempData=0;
	COAO.CoCariFlag=0;
	COAO.CoAvg=0;
	COAO.CoCariStep=0;
	COAO.CoSlope=0;
	COAO.CoOffset=0;
	COAO.TempData_0PPM=0;
	COAO.TempData_150PPM=0;
	
	COAO.ppm_caribration_step=0;
	COAO.ppm_caribration_flag=0;
	COAO.ppm_caribration_slope=0;
	COAO.ppm_caribration_offset=0;
	COAO.fault_short_count=0;
	COAO.fault_open_count=0;
}


/**********************************************************************/
//Description:		CoTemperatureCompensation
//Parameters:			
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
static uint16_t CoTemperatureCompensation(uint16_t Ppm, uint8_t TempValue)
{
	uint16_t ret = Ppm;

	if(TempValue < 10)					//<-10
	{
		ret +=	(ret * 30) / 100;
	}
	else if(TempValue < 20)				//-10 ~ 0
	{
		ret +=	(ret * 20) / 100;
	}
	else if(TempValue < 30)				//0 ~ 10
	{
		ret +=	(ret * 10) / 100;
	}
	else if(TempValue < 55)				//10 ~ 35
	{

	}
	else if(TempValue < 65)				//35 ~ 45
	{
		ret -=	(ret * 10) / 100;
	}
	else if(TempValue < 80)				//45 ~ 60
	{
		ret -=	(ret * 15) / 100;		
	}
	else								// > 60
	{
		ret -=	(ret * 30) / 100;
	}
	
	return ret;
}


/**********************************************************************/
//Description:		Co5000ppmCompensation
//Parameters:			
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
static uint16_t Co5000ppmCompensation(uint16_t Ppm)
{
	uint16_t ret = Ppm;
	static uint16_t Co5000ppmTimeCnt = 0;
	static uint16_t AfterCo5000ppmTimeCnt = 0;
	static bool Co5000ppmComsationFlag = FALSE;

	if(Ppm > 700)
	{
		if((Co5000ppmComsationFlag = FALSE) && (Co5000ppmTimeCnt++ > 60))
		{
			Co5000ppmComsationFlag = TRUE;
			AfterCo5000ppmTimeCnt = 0;
		}
	}
	else
	{
		Co5000ppmTimeCnt = 0;
	}

#ifdef SUPPORT_CO_DEBUG
	printf("5000_Flag=%d, cnt=%d\n", Co5000ppmComsationFlag, AfterCo5000ppmTimeCnt);
	printf("ppm=%d\n", Ppm);
#endif

	if(Co5000ppmComsationFlag == TRUE)
	{
		AfterCo5000ppmTimeCnt++;
		if(AfterCo5000ppmTimeCnt > 2520)
		{
			Co5000ppmComsationFlag = FALSE;
		}
		else
		{
			if(ret>20)
			{
				if(AfterCo5000ppmTimeCnt > 720)    	// 6h=360*6 = 2160
				{
				 	ret += 6;
				}
				else if(AfterCo5000ppmTimeCnt > 600)    // 5h=360*5 = 1800
				{
					ret += 8;
				}	
				else if(AfterCo5000ppmTimeCnt>480)    	// 4h=360*4= 1440
				{
					ret += 12;
				}
				else if(AfterCo5000ppmTimeCnt>360)    	// 3h=360*3=1080
				{
					ret += 16;
				}
				else if(AfterCo5000ppmTimeCnt>120)    	// 1h=360*1=360
				{
					ret += 20;
				}
				else
				{
					ret += 20;
				}
			}
		}
	}
	
	return ret;
}


static uint16_t CoGetPpm(uint16_t CoSample,int8 temp)
{
	uint16_t ppm=0;
	//    uint32_t temp_offset=(uint32_t)COAO.CoOffset;
	//    uint32_t temp_slope=(uint32_t)COAO.CoSlope;
	uint16_t offset=0;
	uint16_t slope=0;

	offset=(uint16_t)((uint32_t)COAO.CoOffset*co_temp_offset_rate[temp]/1000);
	slope=(uint16_t)((uint32_t)COAO.CoSlope*co_temp_slope_rate[temp]/1000);

	if(CoSample>=offset)
	{
		ppm = (CoSample - offset)*10/slope;
#ifdef SUPPORT_CO_DEBUG
		printf("co:%d ppm \n", ppm);
#endif
	}
	else
	{
		ppm = 0;
#ifdef SUPPORT_CO_DEBUG
		printf("offset:%d, ",offset);
		printf("Co_Sample:%d \n\n",CoSample);
#endif
	}
	return ppm;
}


#ifdef SUPPORT_UL2034_UL217
static void COPpmULCheck(CoObjectTag *pCO,uint16_t Ppm)
{
	static uint8_t CoCancelAlarmNum = 0;
	//printf("ULPPM=%d\n",Ppm);

	if(Ppm<=COPPMLEVEL1)// <30ppm
	{
		CoCancelAlarmNum++;
		if(CoCancelAlarmNum>=3)
		{
			CoCancelAlarmNum=3;
			if((SysAO.eMode == CoAlarmMode) || (SysAO.eMode == CoMuteMode))
			{
				SysteSetSig(eEventSigCoAlarmCancel);
			}
		}
		pCO->COAlarmThreshold0 = 0;
		pCO->COAlarmThreshold1 = 0;
		pCO->COAlarmThreshold2 = 0;
		pCO->COAlarmThreshold3 = 0;
		pCO->COAlarmThreshold4 = 0;
	}
	else  //>=30 ppm
	{
		CoCancelAlarmNum = 0;
		if(Ppm>COPPMLEVEL1&&Ppm<=COPPMLEVEL2)		// <70ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;

		}else if(Ppm>COPPMLEVEL2&&Ppm<=COPPMLEVEL3)	// <150ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;
			pCO->COAlarmThreshold2++;

		}
		else if(Ppm>COPPMLEVEL3&&Ppm<=COPPMLEVEL4)	// <400ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;
			pCO->COAlarmThreshold2++;
			pCO->COAlarmThreshold3++;

		}else if(Ppm>COPPMLEVEL4)// >5000ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;
			pCO->COAlarmThreshold2++;
			pCO->COAlarmThreshold3++;
			pCO->COAlarmThreshold4++;
		}
		
		if((pCO->COAlarmThreshold0 > (CO_ALARM_70PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))) ||
			(pCO->COAlarmThreshold1 > (CO_ALARM_150PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))) ||
				(pCO->COAlarmThreshold2 > (CO_ALARM_400PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))) ||
					(pCO->COAlarmThreshold3 > (CO_ALARM_400PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))))
		{
			SysteSetSig(eEventSigCoAlarm);
			
			#ifdef SUPPORT_CO_DEBUG
			printf("COAlarmThreshold0 = %d\n",pCO->COAlarmThreshold0);
			printf("COAlarmThreshold1 = %d\n",pCO->COAlarmThreshold1);
			printf("COAlarmThreshold2 = %d\n",pCO->COAlarmThreshold2);
			printf("COAlarmThreshold3 = %d\n",pCO->COAlarmThreshold3);
			printf("Event:co alarm\n");
			#endif
		}
	}
}
#else
/******************************************************************************
**Description:																	
** Parameters:                        											
**     Return:   																
*******************************************************************************/

static void COPpmBSICheck(CoObjectTag *pCO,uint16_t Ppm)
{
	static uint8_t CoCancelAlarmNum = 0;

	if(Ppm<=COPPMLEVEL0)// <30ppm
	{
		CoCancelAlarmNum++;
		if(CoCancelAlarmNum>=3)
		{
			CoCancelAlarmNum=3;
			if((SysAO.eMode == CoAlarmMode) || (SysAO.eMode == CoMuteMode))
			{
				SysteSetSig(eEventSigCoAlarmCancel);
			}
		}
		pCO->COAlarmThreshold0 = 0;
		pCO->COAlarmThreshold1 = 0;
		pCO->COAlarmThreshold2 = 0;
		pCO->COAlarmThreshold3 = 0;
		pCO->COAlarmThreshold4 = 0;
	}
	else
	{
		CoCancelAlarmNum = 0;
		if(Ppm>COPPMLEVEL0&&Ppm<=COPPMLEVEL1)		// <50ppm
		{
			pCO->COAlarmThreshold0++;

		}
		else if(Ppm>COPPMLEVEL1&&Ppm<=COPPMLEVEL2)	// <100ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;

		}else if(Ppm>COPPMLEVEL2&&Ppm<=COPPMLEVEL3)	// <300ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;
			pCO->COAlarmThreshold2++;

		}
		else if(Ppm>COPPMLEVEL3&&Ppm<=COPPMLEVEL4)	// <5000ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;
			pCO->COAlarmThreshold2++;
			pCO->COAlarmThreshold3++;

		}
		else if(Ppm>COPPMLEVEL4)// >5000ppm
		{
			pCO->COAlarmThreshold0++;
			pCO->COAlarmThreshold1++;
			pCO->COAlarmThreshold2++;
			pCO->COAlarmThreshold3++;
			pCO->COAlarmThreshold4++;
		}
		else if(Ppm<COPPMLEVEL0)
		{
			pCO->COAlarmThreshold0 = 0;
			pCO->COAlarmThreshold1 = 0;
			pCO->COAlarmThreshold2 = 0;
			pCO->COAlarmThreshold3 = 0;
			pCO->COAlarmThreshold4 = 0;
		}

#ifdef SUPPORT_CO_DEBUG

		printf("COAlarmThreshold0 = %d\n",pCO->COAlarmThreshold0);
		printf("COAlarmThreshold1 = %d\n",pCO->COAlarmThreshold1);
		printf("COAlarmThreshold2 = %d\n",pCO->COAlarmThreshold2);
		printf("COAlarmThreshold3 = %d\n",pCO->COAlarmThreshold3);
#endif
		if((pCO->COAlarmThreshold0 > (CO_ALARM_30PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))) ||
		(pCO->COAlarmThreshold1 > (CO_ALARM_50PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))) ||
		(pCO->COAlarmThreshold2 > (CO_ALARM_100PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))) ||
		(pCO->COAlarmThreshold3 > (CO_ALARM_300PPM_TIME*60/(SLEEP_TIME*CO_CHECK_COUNT))))
		{
			SysteSetSig(eEventSigCoAlarm);
			pCO->COAlarmThreshold0 = 0;
			pCO->COAlarmThreshold1 = 0;
			pCO->COAlarmThreshold2 = 0;
			pCO->COAlarmThreshold3 = 0;
			pCO->COAlarmThreshold4 = 0;
		}
	}	 
}
#endif



/**********************************************************************/
//Description:		CoAlarmTimeOut
//Parameters:			
//Return:   											
//Date:  
//author:			song.jiang
/**********************************************************************/
uint16_t CoAlarmCheck(void)
{
	static uint8_t LatchingCo100PpmCnt = 0;
	static uint16_t co_ppm=0;
	uint16_t CoSample=0;
	uint8_t TempValue = 0;
#ifdef SUPPORT_CO_DEBUG
	uint16_t CoSampleVoltage = 0;
#endif

	CoSample = GetAdcSample(eAdcCoChannel, FALSE);
	TempValue = GetSmokeTemp();
	
	co_ppm = CoGetPpm(CoSample,TempValue);

#ifdef SUPPORT_CO_DEBUG
	printf("T_Comp(before), T=%d, ppm=%d\n", TempValue, co_ppm);
#endif

	co_ppm = CoTemperatureCompensation(co_ppm, TempValue);

	co_ppm = Co5000ppmCompensation(co_ppm);

	if(co_ppm>=1000)
	{
		co_ppm=999;
	}

	if(co_ppm>=100)
	{
		LatchingCo100PpmCnt++;
		if(LatchingCo100PpmCnt > 5)
		{
			LatchingCo100PpmCnt = 5;
		}
	}
	else if(co_ppm < COPPMLEVEL0)
	{
		if(LatchingCo100PpmCnt > 2)
		{
			SysAO.eEventFlg |= eEventFlagLatchingCoAlarm;
		}
		LatchingCo100PpmCnt = 0;
	}

#ifdef SUPPORT_CO_DEBUG
	CoSampleVoltage = GetVol(VDD_FROM_LDO, CoSample);;
	printf("co sample=%d", CoSampleVoltage);
	printf("(%d)\n", CoSample);
	printf("PPM=%d\n", co_ppm);
#endif

	//alarm check
#ifdef SUPPORT_UL2034_UL217
	COPpmULCheck(&COAO,co_ppm);		
#else
	COPpmBSICheck(&COAO,co_ppm);
#endif

	return co_ppm;
}


/**********************************************************************/
//Description:		LoadCOData
//Parameters:                        								
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
bool LoadCOData(void)
{
	bool CailCoRes = FALSE;
	
	COAO.CoCariFlag = E2promRead(FLASH_ADDR_CO_CARIBRATION_FLAG);
	COAO.CoCariStep = E2promRead(FLASH_ADDR_CARIBRATION_STEP);
	COAO.CoSlope = E2promRead(FLASH_ADDR_CARIBRATION_PPM_SLOPE_MSB);
	COAO.CoSlope <<= 8;
	COAO.CoSlope |= E2promRead(FLASH_ADDR_CARIBRATION_PPM_SLOPE_LSB);
	COAO.CoOffset = E2promRead(FLASH_ADDR_CARIBRATION_PPM_OFFSET_MSB);	 
	COAO.CoOffset <<= 8;
	COAO.CoOffset|=E2promRead(FLASH_ADDR_CARIBRATION_PPM_OFFSET_LSB);
	COAO.TempData_0PPM = E2promRead(FLASH_ADDR_CARIBRATION_0_TEMPERATURE);
	COAO.TempData_150PPM = E2promRead(FLASH_ADDR_CARIBRATION_150_TEMPERATURE);
	
	if((COAO.CoCariFlag == CO_CARIBRATION_FLAG) )
	{
		CailCoRes = TRUE;
		printf("Co: Offset = %d\n",COAO.CoOffset);
		printf("Slope = %d\n",COAO.CoSlope);	
		PwrAO.standbycnt = LowPwrMaxCnt;					//must for current electricity test
	}
	else
	{
		printf("Cail Step = ");
		if(COAO.CoCariStep == 0xFF)
		{
			printf("1\n");
		}
		else
		{
			printf("%d\n", COAO.CoCariStep+1);
		}
	}

	return CailCoRes;
}


/**********************************************************************/
//Description:		CoAlarmTimeOut
//Parameters:			
//Return:   											
//Date:  
//author:			song.jiang
/**********************************************************************/
eCOState COSelfCheck(CoObjectTag *pCO)
{ 
	eCOState ret = eCONO;//0 :normal 1:CO 2:err
	int16 temp=0;

	uint16_t sample=0,fault_sample=0;

	sample=GetAdcSample(eAdcCoChannel, FALSE);
	sample = GetVol(VDD_FROM_LDO, sample);
	fault_sample = GetAdcSample(eAdcCoChannel, TRUE);
	fault_sample = GetVol(VDD_FROM_LDO, fault_sample);
	temp=fault_sample-sample;

	
#ifdef SUPPORT_CO_DEBUG 
	printf("fault_sample=%dmV\n",fault_sample);
	printf("sample=%dmV\n",sample);
#endif
	if(fault_sample>SENSOR_OPEN_FAULT_SAMPLE)
	{
		GCC_DELAY(50000);	   // 15000 150ms//DelayMs(20);
		sample=GetAdcSample(eAdcCoChannel, FALSE);

		if(sample<SENSOR_OPEN_SAMPLE)
		{
			ret = eCOErr;
			pCO->fault_open_count++;
			pCO->fault_short_count=0;
			pCO->COAlarmThreshold0 = 0;
			pCO->COAlarmThreshold1 = 0;
			pCO->COAlarmThreshold2 = 0;
			pCO->COAlarmThreshold3 = 0;
			pCO->COAlarmThreshold4 = 0;
		}
	}
	else if(((fault_sample>SENSOR_SHORT_SAMPLE_MIN)
		&&(fault_sample<SENSOR_SHORT_SAMPLE_MAX))
		&&((temp<100)&&(temp>-100)))
	{
		ret = eCOErr;
		pCO->fault_short_count++;
		pCO->fault_open_count=0;
		pCO->COAlarmThreshold0 = 0;
		pCO->COAlarmThreshold1 = 0;
		pCO->COAlarmThreshold2 = 0;
		pCO->COAlarmThreshold3 = 0;
		pCO->COAlarmThreshold4 = 0;
	}
	else
	{
		SysteSetSig(eEventSigCoErrRecovery);
		pCO->fault_open_count=0;
		pCO->fault_short_count=0;
	}

	if(pCO->fault_open_count>=2)
	{
		pCO->fault_open_count=2;
		ret = eCOOPEN;
		if((SysAO.eErrCode&ERROR_CODE_OPEN)==0)
		{
			SysAO.eErrCode 	|= 	ERROR_CODE_OPEN;
			SysteSetSig(eEventSigCoErr);
		}

	}
	else if(pCO->fault_short_count>=2)
	{
		pCO->fault_short_count=2;
		ret = eCOSHORT;
		if((SysAO.eErrCode&ERROR_CODE_SHORT)==0)
		{
			SysAO.eErrCode |= ERROR_CODE_SHORT;
			SysteSetSig(eEventSigCoErr);
		}
	}

	return ret;
}

/**********************************************************************/
//Description:		PollingCo
//Parameters:                        									
//Return:   											
//Date:  
//author:		    quanwu.xu
/**********************************************************************/
void PollingCo(void *pTxt)
{
	uint16_t Temp = (uint16_t)pTxt;
	switch (Temp)
	{
		case eCoCail:
			SysteSetSig(eEventSigCoCailTimeout);
			break;
			
		case eCoAlarm:
			SysteSetSig(eEventSigCoAlarmTimeout);
			break;

		case eCoAlarmInterVal:
			SysteSetSig(eEventSigCoAlarmIntervalTimeout);
			break;
		
		case eCoErr:
			SysteSetSig(eEventSigCoErrTimeout);
			break;
			
		default:
			break;
	}
}

/**********************************************************************/
//Description:		CoCali
//Parameters:											
//Return:   											
//Date:  
//author:		    quanwu.xu
/**********************************************************************/
void CoCaliMain(void)
{
	static uint8 Delay_Cnt=0;
	static uint16_t CailTemperature = 0;
	static uint16_t CailCoAdcValue = 0;
	uint16_t BatVol = 0;
	uint8_t Temperature=0;
	uint32_t temp_offset=0;
	uint32_t temp_slope=0;
	uint16_t ppm=0,Co_Adc=0, CoAdcVoltage = 0;
	CailResult Result = CailSuccess;

	switch(SysAO.sig)
	{
		case eEventSigEnteryMode:
			Delay_Cnt=0;
			CailTemperature = 0;
			CailCoAdcValue = 0;

			if(LoadCOData() == FALSE)
			{
				printf("Start Cail Co\n");
				TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(5000), (void *)eCoCail);
				BatVol = BatteryCheckHandle();
				Temperature = GetSmokeTemp();
#ifdef TEMPCALIOLD
				if(Temperature<38||Temperature>52)
#else
				if(Temperature<5||Temperature>13)
#endif
				{
					while(1)
					{
						printf("temp err=%d\n", SmokeAO.TempData);
						CailRes(CailFail, eCail_Temp_Err);
					}
				}
				else if(BatVol < BATTERY_LEVEL_LOW_FORBIT_MUTE)
				{
					while(1)
					{
						printf("bat err=%dmV\n", BatVol);
						CailRes(CailFail, eCail_BatErr);
					}
				}
			}
			else
			{
#ifdef SUPPORT_SPEAK_FUNCTION
				SpeakerSendCmd(CMD_WELCOME_HELLO);
#endif
				PowerOnDisplay();
				SysAO.eMode = NormalMode;
			}
			break;

		case eEventSigCoCailTimeout:
			Temperature = GetSmokeTemp();
			Co_Adc = GetAdcSample(eAdcCoChannel, FALSE);

#ifdef SUPPORT_CARIBRATION_DEBUG 
			printf("%d\n", Delay_Cnt);
			printf("Co_adc=%d\n",Co_Adc);
#endif
			CoAdcVoltage = GetVol(VDD_FROM_LDO, Co_Adc);

			Delay_Cnt++;
			if(COAO.CoCariStep==1)//AQ	Step 2 Caribration 150 PPM
			{
				CailStepDisplay(eCail_Co_Step2);
				if(Delay_Cnt>CAIL_CO_WAIT_TIME)
				{
					CailCoAdcValue+=Co_Adc;
					CailTemperature+=Temperature;
					if(Delay_Cnt>=(CAIL_CO_WAIT_TIME+SAMPLE_CO_TIME_CNT))
					{
						Delay_Cnt=0;
						CailCoAdcValue>>=4;
						CailTemperature>>=4;
		
						// 150ppm offset valu  e when in temperature T
						temp_offset = ((uint32_t)COAO.CoOffset)*co_temp_offset_rate[CailTemperature]/1000;
						// 150ppm slope value when in temperature T
						temp_slope = (CailCoAdcValue - (uint16_t)temp_offset)/15; 	// 10ppm
						// 150ppm slope value when in temperature 20C
						COAO.ppm_caribration_slope = (uint16_t)(temp_slope*1000/co_temp_slope_rate[CailTemperature]); 
		
						if((COAO.ppm_caribration_slope>PPM_CARIBRATON_STEP1_THRESHOLD_MIN)&&
									(COAO.ppm_caribration_slope<PPM_CARIBRATON_STEP1_THRESHOLD_MAX))		   //step1 success
						{
							COAO.CoCariStep=2;
							E2promWrite(FLASH_ADDR_CARIBRATION_PPM_SLOPE_MSB,  COAO.ppm_caribration_slope>>8);	
							E2promWrite(FLASH_ADDR_CARIBRATION_PPM_SLOPE_LSB, COAO.ppm_caribration_slope&0xff);  
							E2promWrite(FLASH_ADDR_CARIBRATION_STEP, COAO.CoCariStep);		//step2
							E2promWrite(FLASH_ADDR_CARIBRATION_150_TEMPERATURE, CailTemperature);

							Result = CailSuccess;
						}
						else					   //step1 fail
						{
							Result = CailFail;
						}

						while(1)
						{
#ifdef SUPPORT_CARIBRATION_DEBUG
							printf("Step2=%dmV, ",CoAdcVoltage);
							printf("T=%d\n", (Temperature-20));
							printf("Slope=%d\n",COAO.ppm_caribration_slope);
#endif
							CailRes(Result, eCail_Co_Step2);
						}
					}
				}
			}
			else if(COAO.CoCariStep==2)//Step 3 Caribration 400 PPM
			{
				CailStepDisplay(eCail_Co_Step3);
				if(Delay_Cnt>CAIL_CO_WAIT_TIME)//13??*30S==390S
				{
					CailCoAdcValue+=Co_Adc;
					CailTemperature+=Temperature;
					if(Delay_Cnt>=(CAIL_CO_WAIT_TIME+SAMPLE_CO_TIME_CNT))
					{
						Delay_Cnt=0;
						CailCoAdcValue>>=4;
						CailTemperature >>=4;
						ppm = CoGetPpm(CailCoAdcValue, CailTemperature);
		
#if defined SUPPORT_UL2034_UL217          // 400ppm
						if((ppm>=340)&&(ppm<=460))		  //-15% - +15% 		//step2 sucess
#elif defined SUPPORT_EN50291_EN14604     // 300ppm
						if((ppm>=255)&&(ppm<=345))		  //-15% - +15%
#endif
						{
							COAO.CoCariStep=3;
							E2promWrite(FLASH_ADDR_CO_CARIBRATION_FLAG, CO_CARIBRATION_FLAG);
							E2promWrite(FLASH_ADDR_CARIBRATION_STEP, 0x00);    //clear step

							Result = CailSuccess;
						}
						else							//step1 fail
						{
							Result = CailFail;
						}

						while(1)
						{
#ifdef SUPPORT_CARIBRATION_DEBUG
							printf("Step3=%dmV, ",CoAdcVoltage);
							printf("T=%d\n", (Temperature-20));
							printf("COAO.ppm=%d\n",ppm);
#endif
							CailRes(Result, eCail_Co_Step3);
						}
					}
				}
			}
			else //Step 0 Caribration 0 PPM
			{
				CailStepDisplay(eCail_Co_Step1);
				if(Delay_Cnt>CAIL_CO_WAIT_TIME)
				{
					CailCoAdcValue+=Co_Adc;
					CailTemperature+=Temperature;
					if(Delay_Cnt>=(CAIL_CO_WAIT_TIME+SAMPLE_CO_TIME_CNT))
					{
						Delay_Cnt=0;
						CailCoAdcValue >>=4;	
						CailTemperature >>= 4;
						COAO.ppm_caribration_offset = (uint16_t)((uint32_t)CailCoAdcValue*1000/co_temp_offset_rate[CailTemperature]);

						if((COAO.ppm_caribration_offset>PPM_CARIBRATON_STEP0_THRESHOLD_MIN)&&(COAO.ppm_caribration_offset<PPM_CARIBRATON_STEP0_THRESHOLD_MAX))		   //step0 success
						{
							COAO.CoCariStep=1;
							E2promWrite(FLASH_ADDR_CARIBRATION_PPM_OFFSET_MSB, COAO.ppm_caribration_offset>>8);
							E2promWrite(FLASH_ADDR_CARIBRATION_PPM_OFFSET_LSB, COAO.ppm_caribration_offset&0xff);
							E2promWrite(FLASH_ADDR_CARIBRATION_0_TEMPERATURE, CailTemperature);
							E2promWrite(FLASH_ADDR_CARIBRATION_STEP, COAO.CoCariStep);		  //step1

							Result = CailSuccess;
						}
						else					   //step1 fail
						{
							Result = CailFail;
						}

						while(1)
						{
#ifdef SUPPORT_CARIBRATION_DEBUG
							printf("Step1=%dmV, ",CoAdcVoltage);
							printf("T=%d\n", (Temperature-20));
							printf("offset=%d\n", COAO.ppm_caribration_offset);
#endif
							CailRes(Result, eCail_Co_Step1);
						}
					}
				}
			}
			break;

		default:
			break;
	}
}


/**********************************************************************/
//Description:		CoAlarmTimeOut
//Parameters:			
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
static void CoMuteTimeout(uint16_t MuteTimeCnt)
{
	static uint16 PPM=0;
#ifdef SUPPORT_SYSTEM_MODE_DEBUG
	printf("CoMuteTime :%d\n",MuteTimeCnt);
#endif

	if(MuteTimeCnt>=CO_MUTE_TIMEOUT_ReCheck)	//after 5min Check PPM,if PPM>30PPM Alarming
	{
		PPM=CoAlarmCheck();
#if defined SUPPORT_UL2034_UL217
		if(PPM > CO_ALARM_70PPM_CONCENTRATION)
#elif defined SUPPORT_EN50291_EN14604
		if(PPM > CO_ALARM_30PPM_CONCENTRATION)
#endif
		{
			TmrDeleteTimer(eTmrHdlCo );
			SysteSetSig(eEventSigCoAlarm);
		}
	}
	
	if(MuteTimeCnt >= CO_MUTE_TIMEOUT_COUNT)	//last for 9min
	{
		SysAO.eMode = NormalMode;
		TmrDeleteTimer(eTmrHdlCo );
		SysteSetSig(eEventSigCoMuteFinished);
	}
}


/**********************************************************************/
//Description:		CoTestMain
//Parameters:                        									
//Return:   											
//Date:  
//author:		    quanwu.xu
/**********************************************************************/
void CoTestMain(void)
{
#ifdef SUPPORT_CO_FUNCTION
	uint8_t Ret = 0;
#endif
	static uint8_t TimeoutCnt = 0;
	static uint8_t IntervalTimeoutCnt = 0;

	switch(SysAO.sig)
	{
		case eEventSigEnteryMode:
#ifdef SUPPORT_CO_DEBUG 
			printf("Co Test\n");
#endif
			TimeoutCnt = 0;
			IntervalTimeoutCnt = 0;

#ifdef SUPPORT_CO_FUNCTION
			Ret=COSelfCheck(&COAO);
			if(eCOErr==Ret)	//CO ERROR
			{
				SysAO.eMode = CoErrMode;
			}
			else
#endif
			{
				TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			}
			
			break;

		case eEventSigCoAlarmTimeout:
			if(++TimeoutCnt > 7)
			{
				TimeoutCnt = 0;
				R_LED_OFF();
				BEEP_OFF();

				TmrDeleteTimer(eTmrHdlCo);
				if(++IntervalTimeoutCnt > 1)
				{
					IntervalTimeoutCnt = 0;
					SysteSetSig(eEventSigCoTestCancel);
				}
				else
				{
					TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(5000), (void *)eCoAlarmInterVal);
				}
			}
			else
			{
				R_LED_TOGGLE();
				BEEP_TOGGLE();
			}
			break;

		case eEventSigCoAlarmIntervalTimeout:
			TmrDeleteTimer(eTmrHdlCo);
			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;

		case eEventSigCoTestCancel:
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_FUNCTION_PROPERLY);
			SysAO.eMode = NormalMode;
#endif
			if(GetRfPairedMode() ==  ePairedHub)
			{
				UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgTest, DevTestSuccess);
			}
			SysAO.eMode = NormalMode;
			break;
			
		default:
			break;
	}
}

/**********************************************************************/
//Description:		CoAlarmMain
//Parameters:                        								
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
void CoAlarmMain(void)
{
	static uint8_t TimeoutCnt = 0;

	switch(SysAO.sig)
	{
		case eEventSigEnteryMode:
			printf("Co Alarm Mode\n");

			TimeoutCnt = 0;
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_CO_ALARM);
#endif

#ifdef SUPPORT_RF_NET_FUNCTION
			UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgCoAlarm, 0);
#endif

			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;

		case eEventSigCoAlarmTimeout:
			if(++TimeoutCnt > 7)
			{
				TimeoutCnt = 0;
				R_LED_OFF();
				BEEP_OFF();
				TmrDeleteTimer(eTmrHdlCo);
				TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(5000), (void *)eCoAlarmInterVal);

				SysteSetSig(eEventSigSensorCheck);
			}
			else
			{
				R_LED_TOGGLE();
				BEEP_TOGGLE();
			}
			break;

		case eEventSigCoAlarmIntervalTimeout:
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_CO_ALARM);
#endif
			TmrDeleteTimer(eTmrHdlCo);
			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;

		case eEventSigKey1Clik:
#ifdef SUPPORT_EN50291_EN14604
			if(CoAlarmCheck() < 300)				//EN, <300 can be Muted
			{
				TmrDeleteTimer(eTmrHdlCo);
				SysAO.eMode = CoMuteMode;
			}
#elif defined(SUPPORT_UL2034_UL217)
			TmrDeleteTimer(eTmrHdlCo);
			SysAO.eMode = CoMuteMode;
#endif
			break;

		case eEventSigSmokeAlarm:
			SysAO.eMode = SmokeAlarmMode;
			TmrDeleteTimer(eTmrHdlCo);
			break;

		case eEventSigCoAlarmCancel:
			SysAO.eMode = NormalMode;
			SysAO.eEventFlg |= eEventFlagLatchingCoAlarm;
			TmrDeleteTimer(eTmrHdlCo);
#ifdef SUPPORT_RF_NET_FUNCTION
			UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgCancelAlarm, 0);
#endif
			break;

		case eEventSigSensorCheck:
			CoAlarmCheck();
			SmokeAlarmCheck();
			break;

		default:
			break;
				
	}
}


/**********************************************************************/
//Description:		CoMuteMain
//Parameters:                        								
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
void CoMuteMain(void)
{
	uint8_t i = 0;
	static uint8_t TimeoutCnt = 0;
	static uint16_t MuteTimeCnt = 0;

	switch(SysAO.sig)
	{
		case eEventSigEnteryMode:
			printf("Co Mute Mode\n");
			TimeoutCnt = 0;
			MuteTimeCnt = 0;
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_CO_MUTE_BY_KEY);
			SpeakerSendCmd(CMD_ENTRY_MUTE_MODE);
#endif

#ifdef SUPPORT_RF_NET_FUNCTION
			UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgMute, 0);
#endif

			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;
		
		case eEventSigKey1Clik:
			break;

		case eEventSigCoAlarmTimeout:
			if(++TimeoutCnt > 7)
			{
				TimeoutCnt = 0;
				R_LED_OFF();
#ifdef SUPPORT_SPEAK_FUNCTION
				SpeakerSendCmd(CMD_MUTE_IN_CO_ALARM);
#endif
				TmrDeleteTimer(eTmrHdlCo);
				TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(5000), (void *)eCoAlarmInterVal);
			}
			else
			{
				R_LED_TOGGLE();
			}
			break;

		case eEventSigCoAlarmIntervalTimeout:
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_MUTE_IN_CO_ALARM);
#endif
			SmokeAlarmCheck();
			CoMuteTimeout(MuteTimeCnt++);
			TmrDeleteTimer(eTmrHdlCo);
			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;

		case eEventSigCoAlarm:
			SysAO.eMode = CoAlarmMode;
			TmrDeleteTimer(eTmrHdlCo);
			break;

		case eEventSigSmokeAlarm:
			TmrDeleteTimer(eTmrHdlCo);
			SysAO.eMode = SmokeAlarmMode;
			break;

		case eEventSigCoMuteFinished:
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_EXIT_MUTE_MODE);
#endif

#ifdef SUPPORT_RF_NET_FUNCTION
			if(GetRfPairedMode() == ePairedHub)
			{
				UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgCancelAlarm, 0);
			}
#endif
			for(i = 0; i<3; i++)
			{
				G_LED_ON();
				GCC_DELAY(250000);
				GCC_DELAY(250000);
				G_LED_OFF();
				GCC_DELAY(250000);
				GCC_DELAY(250000);
			}
			SysAO.eMode = NormalMode;
			TmrDeleteTimer(eTmrHdlCo);
			break;

		default:
			break;
				
	}	
}

/**********************************************************************/
//Description:		CoErrMain
//Parameters:                        								
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
void CoErrMain(void)
{
	static uint8_t CheckTimeCnt = 0;

	switch(SysAO.sig)
	{
		case eEventSigEnteryMode:
		case eEventSigKey1Clik:
			printf("Co Err Mode\n");
			CheckTimeCnt = 0;
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_CO_SENSOR_ERR);
#endif

#ifdef SUPPORT_RF_NET_FUNCTION  //reserved
			if(GetRfPairedMode() == ePairedHub)
			{
				UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgFault, DevSmokeSenorFault);
			}
#endif
			ErrIndex(1,1,2);
			break;

		case eEventSigWakeup:
			COSelfCheck(&COAO);
			if(++CheckTimeCnt>5)
			{
#ifdef SUPPORT_SPEAK_FUNCTION
				SpeakerSendCmd(CMD_CO_SENSOR_ERR);
#endif
				CheckTimeCnt = 0;
				ErrIndex(1,1,2);
			}
			break;

		case eEventSigCoErrRecovery:
#ifdef SUPPORT_RF_NET_FUNCTION
			if(GetRfPairedMode() == ePairedHub)
			{
				UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgFault, DevFaultCancel);
			}
#endif
			SysAO.eMode = NormalMode;
			break;
		
		default:
			break;
	}
}

#ifdef SUPPORT_RF_NET_FUNCTION
/**********************************************************************/
//Description:		NetTestMain
//Parameters:                        								
//Return:   											
//Date:  
//author:			quanwu.xu
/**********************************************************************/
void RfCoAlarmMain(void)
{
	static uint8_t TimeoutCnt = 0;

	switch(SysAO.sig)
	{
		case eEventSigEnteryMode:
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_CO_ALARM);
#endif
			TimeoutCnt = 0;
			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;

		case eEventSigCoAlarmTimeout:
			if(++TimeoutCnt > 7)
			{
				if(TimeoutCnt>8)
				{
					TimeoutCnt = 0;
					TmrDeleteTimer(eTmrHdlCo);
					TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(5000), (void *)eCoAlarmInterVal);
					SysteSetSig(eEventSigSensorCheck);
				}
				else
				{
					BEEP_OFF();
					R_LED_OFF();
					PollingGreenLED(500);
				}
			}
			else
			{
				BEEP_TOGGLE();
				if(TimeoutCnt%2 == 0)
				{
					R_LED_OFF();
				}
				else
				{
					R_LED_ON();
				}
			}
			break;

		case eEventSigCoAlarmIntervalTimeout:
#ifdef SUPPORT_SPEAK_FUNCTION
			SpeakerSendCmd(CMD_CO_ALARM);
#endif
			TmrDeleteTimer(eTmrHdlCo);
			TmrInsertTimer(eTmrHdlCo, TMR_PERIOD(100), (void *)eCoAlarm);
			break;


		case eEventSigCoAlarm:
			TmrDeleteTimer(eTmrHdlCo);
			SysAO.eMode = CoAlarmMode;
			break;

		case eEventSigSmokeAlarm:
			TmrDeleteTimer(eTmrHdlCo);
			SysAO.eMode = SmokeAlarmMode;
			break;

		case eEventSigKey1Clik:
#ifdef SUPPORT_RF_NET_FUNCTION
			UartSendMsg(eUartMsgFireAlarm, UartFirmAlarmMsgCancelAlarm, 0);
#endif
		case eEventSigRadioCancelAlarm:
			TmrDeleteTimer(eTmrHdlCo);
			SysAO.eMode = NormalMode;
			break;

		case eEventSigSensorCheck:
			CoAlarmCheck();
			SmokeAlarmCheck();
			break;

		default:
			break;
	}
}
#endif

